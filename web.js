
/********** DEPENDENCIES ****************/
var express = require('express');
var app = express();
/*
app
  .use(express.bodyParser())
  .use(express.cookieParser('_busrinf0!!!'))
  .use(express.session())
  .use(everyauth.middleware(app));
*/

var request = require('request');
var fs = require('fs');

//app templating engines   
var hbs = require('hbs');
var helpers = require('./helpers.js'); //Handlebars helpers methods
//var L = require('leaflet');


app.set('view engine', 'html');
app.engine('html', hbs.__express);
app.use(express.bodyParser());
app.use(express.static('public'));

//SESSIONS SESSIONS SESSIONS 
//var everyauth = require('everyauth');

//heroku code requirements
var redis = require('redis');
var url = require('url');
var redisURL = url.parse(process.env.REDISCLOUD_URL);
var client = redis.createClient(redisURL.port, redisURL.hostname, {no_ready_check: true});
client.auth(redisURL.auth.split(":")[1]);
// end heroku


/********** MODULE SCRIPTS ****************/
//app speciic scripts
var routesEngine = require('./routes'); //deprecated
var busrEngine = require('./busr');  //deprecated

//system modules
var agenciesEngine = require('./agencies');  //list of transit agencies
var routeStopsEngine = require('./route_stops');  //list of nodes for a path
var routeMapEngine = require('./route_map');  //geotemporal representation of one path data
var systemMapEngine = require('./system_map');  //geotemporal representation of total system pathways data

var posterEngine = require('./poster');  //not used yet, for contact form




/********** EXPRESS SYSTEM ROUTING ****************/
//APP ROUTES APP ROUTES APP ROUTES APP ROUTES APP ROUTES 
//each sub-function of app tells the server request route to take in the app. 

app.get('/', function(req, res) {
	//res.header('Cache-Control', 'no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0');
	res.render('index',{title:"Busr Transitor", entries:busrEngine.getBusrEntries()});
});


//ROUTE STOPS ROUTE STOPS ROUTE STOPS 
app.get('/route_stops/:agency_name/:route_id/:route_short_name/:route_long_name', function(req, res) {

	var agency_name = req.params.agency_name;
	var route_id = req.params.route_id;
	var route_short_name = req.params.route_short_name;
	var route_long_name = req.params.route_long_name;
	//var my_center1 = routeStopsEngine.setMyCenter(route_id, agency_name);
	//console.log("my center in web.js is: "+my_center1)
	
	//this needs to be fixed so it dynamically supports multiple realtime formats such as SIRI, GTFS-RT, etc. 
	var realbus = new Array();
	
	request('http://www.intercitytransit.com/rtacs/busdata.txt').pipe(fs.createWriteStream('public/IT_busdata.txt'))
	
	//res.header('Cache-Control', 'no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0');
	res.render('route_stops',{title:"Route: "+agency_name+" Route: "+route_id, 
	route_id: route_id, 
	agency_name:agency_name, 
	route_short_name:route_short_name, 
	route_long_name:route_long_name, 
	route_center: routeStopsEngine.getRouteCenter(route_id, agency_name),
	my_center: routeStopsEngine.myCenter,
	route_box: routeStopsEngine.getRouteBox(route_id, agency_name),
	stops:routeStopsEngine.getStops(route_id, agency_name), 
	route_map:routeStopsEngine.getRouteMap(route_id, agency_name), 
	transfers:routeStopsEngine.getTransfers(route_id, agency_name), 
	//realbus: routeStopsEngine.getRealBus(route_short_name),
	transfer_markers:routeStopsEngine.getTransferMarkers(route_id, agency_name),
	schedules:routeStopsEngine.getSchedules(route_id, agency_name) }); 

});




//system  map for a particular transit agency 
app.get('/system_map/:agency_name', function(req, res) {
	
	//data is going to come from a static js file that is generated by route_mapper() in aggregator.rb. 
	//var map_points = require('./maps/icon.js');
	var agency_name = req.params.agency_name;
 
	res.render('system_map',{title:"Sys Map: "+agency_name, agency_name:agency_name, 
	route_map:systemMapEngine.getRouteMap(agency_name)}); 

});




//ABOUT 
app.get('/about', function(req, res) {
	res.render('about', {title:"About"});
});





//AGENCIES NAVIGATOR
app.get('/agencies', function(req, res) {
	//check if array count is greater > 0 then don't regenerate agents list in agencies.js
	agents = agenciesEngine.getAgencies(); //generate the list of agencies to be called by res.render
	res.render('agencies',{title:"Transit Agencies", agencies:agenciesEngine.getAgenciesStatic()});
	
});

app.get('/agency/:agency_name', function(req, res) {
	var agency_name = req.params.agency_name;
	agents = agenciesEngine.getAgency(agency_name);
	routes = agenciesEngine.getAgencyRoutes(agency_name)
	res.render('agency',{title:"Agency:"+agency_name, agency_name:agency_name, 
	agent_routes:agenciesEngine.getAgencyRoutesStatic(agency_name),  
	agent:agenciesEngine.getAgencyStatic(agency_name)});
});





//Post Delegater
app.post('/post', function(req, res){ // Specifies which URL to listen for

  //will need to add logic to control mode flow in post.html using handlebars.js
	
  // req.body -- contains form data

  var fname = req.body.fname;
  var lname = req.body.lname;
  var email = req.body.email;
  var message = req.body.message;
  var mode = req.body.mode;  //all forms need a mode for the post delegator
  var Poster = require('./poster');
  var poster_conroller = new Poster(req);
  //console.log(poster_conroller.greetingText());
  var greeting = poster_conroller.greetingText();
  //var fileUpdate = poster_controller.writeContact(req.body);

  
  res.render('post', {title:"Post", fname:fname, lname:lname, message:message, email: email, mode:mode, greeting:greeting });
});

//Contact
app.get('/contact', function(req, res) {
	res.render('contact', {title:"Contact"});
});










/********** SERVER PARAMETERS ****************/
//app.listen(1337, '127.0.0.1');  local hosting

//heroku specific
app.listen(process.env.PORT || 5000, function(){
  console.log("Express server listening on port %d in %s mode", this.address().port, app.settings.env);
});

